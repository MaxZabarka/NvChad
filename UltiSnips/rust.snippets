# snippet prl "println!" bA
# println!("$1 : {:#?}", $1);
# endsnippet

snippet prl "println!" bA
println!("${1}");
endsnippet

snippet prp "println! with format param" bA
println!("${1}{${2}}${3}", ${4}${0});
endsnippet

snippet d; "dbg! debugging macro statement" bA
dbg!(&${1});
endsnippet

# Functions
snippet fn "Function def" bA
fn ${1:function_name}(${2})${3/..*/ -> /}${3} {
	${VISUAL}${0}
}
endsnippet

snippet pfn "Public function def" bA
pub fn ${1:function_name}(${2})${3/..*/ -> /}${3} {
	${VISUAL}${0}
}
endsnippet

snippet afn "Async function def" bA
async fn ${1:function_name}(${2})${3/..*/ -> /}${3} {
	${VISUAL}${0}
}
endsnippet

snippet pafn "Public async function def" bA
pub async fn ${1:function_name}(${2})${3/..*/ -> /}${3} {
	${VISUAL}${0}
}
endsnippet
snippet new "Constructor function" bA
pub fn new(${2}) -> ${1:Self} {
	$1 { ${3} }
}
endsnippet

snippet main "Main function" bA
fn main() {
	${0}
}
endsnippet

snippet der "#[derive(..)]" bA
#[derive(${1:Debug})]
endsnippet

snippet fmt "format!(..)" w
format!("${1}{${2}}", ${3})
endsnippet

# Variable def
snippet let "let variable declaration with type inference" bA
let ${1} = ${2};
endsnippet
snippet tlet "let variable declaration with explicit type annotation" bA
let ${1}: ${2} = ${3};
endsnippet

snippet mlet "let mut variable declaration with type inference" bA
let mut ${1} = ${2};
endsnippet
snippet mtlet "let mut variable declaration with explicit type annotation" bA
let mut ${1}: ${2} = ${3};
endsnippet

snippet for "for .. in .." bA
for ${1:i} in ${2} {
	${VISUAL}${0}
}
endsnippet


snippet st "Struct" bA
struct ${1:`!p snip.rv = snip.basename.title() or "Name"`} {
	${VISUAL}${0}
}
endsnippet

snippet pst "Pub struct" bA
struct ${1:`!p snip.rv = snip.basename.title() or "Name"`} {
	${VISUAL}${0}
}
endsnippet

snippet en "Enum" bA
enum ${1:`!p snip.rv = snip.basename.title() or "Name"`} {
	${VISUAL}${0}
}
endsnippet

snippet pen "Pub enum" bA
pub enum ${1:`!p snip.rv = snip.basename.title() or "Name"`} {
	${VISUAL}${0}
}
endsnippet

snippet opt "Option<T>" wA
Option<${1:i32}>
endsnippet

snippet res "Result<T>" wA
Result<${1:()}>
endsnippet

snippet if "If" bA
	if ${1} {
		${0:${VISUAL}}
	}
endsnippet

snippet eif "If else" bA
	if ${1} {
		${2:${VISUAL}}
	} else {
		${0}
	}
endsnippet

snippet lif "if let (...)" bA
if let ${1:Some($2)} = $3 {
	${0:${VISUAL}}
}
endsnippet

snippet fd "Field def" bA
${1:field}: ${2:Type},
endsnippet

snippet |} "Closure, anonymous function (block)" iA
${1:move }|$2| {
	$3
}
endsnippet

snippet use "use ...;" 
use ${1:std::$2};
endsnippet

snippet oke "ok_or with anyhow!" wA
.ok_or(anyhow!("${1}"))?
endsnippet


